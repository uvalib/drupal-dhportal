#
# deployspec.yml
#

version: 0.2

env:
  variables:
    target_host: dh-drupal-dev-1.internal.lib.virginia.edu
    target_host_user: aws_deploy
    target_host_key: aws_deploy
    target_command: "sudo docker exec drupal-0 /opt/drupal/util/drupal-dhportal/scripts/server/pull-git-changes.sh"
    terraform_version: 1.11.1
    # Determine environment based on branch or parameter
    DEPLOYMENT_ENVIRONMENT: staging  # This should be set to 'production' for prod deployments
    #ansible_debug: -vvvv

phases:
  install:
    runtime-versions:
      python: 3.x
      golang: 1.x
    commands:
      # install ccrypt, needed for secret decrypting
      - dnf install -y http://ccrypt.sourceforge.net/download/1.11/ccrypt-1.11-1.x86_64.rpm
      # install Ansible, needed for deploy of playbook
      - pip3 install ansible
      # install terraform
      - wget https://releases.hashicorp.com/terraform/${terraform_version}/terraform_${terraform_version}_linux_amd64.zip
      - unzip terraform_${terraform_version}_linux_amd64.zip
      - mv terraform /usr/local/bin

  pre_build:
    commands:
      # clone terraform repo
      - git clone https://${GITLAB_USER}:${GITLAB_TOKEN}@gitlab.com/uvalib/terraform-infrastructure.git
      # decrypt the bastion private key
      - BASTION_KEY_NAME=staging/bastion/keys/bastion_staging.pem
      - BASTION_KEY=${CODEBUILD_SRC_DIR}/terraform-infrastructure/${BASTION_KEY_NAME}
      - ${CODEBUILD_SRC_DIR}/terraform-infrastructure/scripts/decrypt-key.ksh ${BASTION_KEY}.cpt ${BASTION_KEY_NAME}
      # decrypt the instance private key (environment-specific)
      - |
        if [ "$DEPLOYMENT_ENVIRONMENT" = "production" ]; then
          PRIVATE_KEY_NAME=dh.library.virginia.edu/production/keys/dh-drupal-production.pem
        else
          PRIVATE_KEY_NAME=dh.library.virginia.edu/staging/keys/dh-drupal-staging.pem
        fi
      - PRIVATE_KEY=${CODEBUILD_SRC_DIR}/terraform-infrastructure/${PRIVATE_KEY_NAME}
      - ${CODEBUILD_SRC_DIR}/terraform-infrastructure/scripts/decrypt-key.ksh ${PRIVATE_KEY}.cpt ${PRIVATE_KEY_NAME}
      - chmod 600 ${PRIVATE_KEY}
      - echo "Detecting changed files!"
      - echo source version = $CODEBUILD_RESOLVED_SOURCE_VERSION
      - CHANGED_FILES=$(curl -s  https://api.github.com/repos/uvalib/drupal-dhportal/compare/$CODEBUILD_RESOLVED_SOURCE_VERSION^1...$CODEBUILD_RESOLVED_SOURCE_VERSION | jq -r '.files[].filename' )
      - echo "$CHANGED_FILES"
      - |
       if echo "$CHANGED_FILES" | grep -v '^web/themes/custom/cacs_theme' > /dev/null; then
         echo "Non-theme files changed → full deploy"
         echo "THEME_ONLY=false" >> /tmp/env
       else
         echo "Only theme files changed → limited deploy"
         echo "THEME_ONLY=true" >> /tmp/env
       fi

  build:
    commands:
      - cd ${CODEBUILD_SRC_DIR}/terraform-infrastructure/dh.library.virginia.edu/staging
      - terraform init -no-color
      - ami=$(terraform output instance_ami | grep ami | head -1 | tr -d ", \"")
      - echo "AMI [${ami}]"
      - |
        if [ -z "${ami}" ]; then
          echo "ERROR: cannot determine instance AMI" ;
          exit 1 ;
        fi
      - terraform apply -auto-approve -no-color -var instance_ami="${ami}" --target=local_file.inventory --target=local_file.tfvars
      - cd ansible
      # - ansible-playbook ${ansible_debug} deploy_backend_1.yml
      - source /tmp/env
      - printenv
      - |
        if [ "$THEME_ONLY" = "true" ]; then
          echo "DEBUG: Running limited theme update..."
          echo "Skipping Redundant checkout... "
          # ssh -oStrictHostKeyChecking=accept-new -i ${HOST_PRIVATE_KEY} aws_deploy@dh-drupal-dev-1.internal.lib.virginia.edu docker exec drupal-0 /opt/drupal/util/drupal-dhportal/scripts/server/pull-git-changes.sh
        else
          echo "DEBUG: Running full rebuild and deploy..."
          echo "Setup SAML certificates using decrypted infrastructure keys"
          echo "Setting up SAML certificates for $DEPLOYMENT_ENVIRONMENT environment..."
          # Make terraform infrastructure available for container certificate setup
          echo "TERRAFORM_INFRA_DIR=${CODEBUILD_SRC_DIR}/terraform-infrastructure" >> /tmp/env
          echo "DEPLOYMENT_ENVIRONMENT=${DEPLOYMENT_ENVIRONMENT}" >> /tmp/env
          ansible-playbook ${ansible_debug} deploy_backend_1.yml
        fi

#  post_build:
#    commands:


#
# end of file
#
